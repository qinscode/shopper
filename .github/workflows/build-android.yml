name: Build Android APK

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: false
        default: 'dev'

jobs:
  build:
    name: Build Android APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup EAS CLI
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Install dependencies
        run: npm ci

      - name: Extract version info
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
            echo "build_type=release" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.inputs.version }}" != "" && "${{ github.event.inputs.version }}" != "dev" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
            echo "build_type=preview" >> $GITHUB_OUTPUT
          else
            VERSION="dev-$(date +'%Y%m%d')-${GITHUB_SHA:0:7}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
            echo "build_type=development" >> $GITHUB_OUTPUT
          fi
          echo "app_name=shopper-$VERSION" >> $GITHUB_OUTPUT

      - name: Update app.json version
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          BUILD_TYPE="${{ steps.version.outputs.build_type }}"

          # Update version in app.json
          jq --arg version "$VERSION" '.expo.version = $version' app.json > tmp.json && mv tmp.json app.json

          # Update versionCode (increment based on timestamp for uniqueness)
          VERSION_CODE=$(date +%s)
          jq --arg versionCode "$VERSION_CODE" '.expo.android.versionCode = ($versionCode | tonumber)' app.json > tmp.json && mv tmp.json app.json

      - name: Generate changelog
        id: changelog
        run: |
          echo "Generating changelog..."

          # Get the latest tag (excluding current if this is a tag build)
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "^${GITHUB_REF#refs/tags/}$" | head -1)
          else
            PREVIOUS_TAG=$(git tag --sort=-version:refname | head -1)
          fi

          if [[ -z "$PREVIOUS_TAG" ]]; then
            echo "## Changes" > CHANGELOG.md
            echo "- Initial release" >> CHANGELOG.md
          else
            echo "## Changes since $PREVIOUS_TAG" > CHANGELOG.md
            
            # Generate changelog from commits
            git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s" --no-merges >> CHANGELOG.md
            
            # If no changes, add a default message
            if [[ ! -s CHANGELOG.md || $(wc -l < CHANGELOG.md) -eq 1 ]]; then
              echo "- Bug fixes and improvements" >> CHANGELOG.md
            fi
          fi

          # Add build info
          echo "" >> CHANGELOG.md
          echo "**Build Info:**" >> CHANGELOG.md
          echo "- Version: ${{ steps.version.outputs.version }}" >> CHANGELOG.md
          echo "- Build Type: ${{ steps.version.outputs.build_type }}" >> CHANGELOG.md
          echo "- Commit: ${GITHUB_SHA:0:7}" >> CHANGELOG.md
          echo "- Date: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> CHANGELOG.md

      - name: Build APK
        run: |
          BUILD_TYPE="${{ steps.version.outputs.build_type }}"

          if [[ "$BUILD_TYPE" == "release" ]]; then
            eas build --platform android --profile production --non-interactive --wait
          elif [[ "$BUILD_TYPE" == "preview" ]]; then
            eas build --platform android --profile preview --non-interactive --wait
          else
            eas build --platform android --profile development --non-interactive --wait
          fi

      - name: Download APK
        run: |
          # Get the latest build URL
          BUILD_ID=$(eas build:list --platform android --limit 1 --json | jq -r '.[0].id')
          BUILD_URL=$(eas build:list --platform android --limit 1 --json | jq -r '.[0].artifacts.buildUrl')

          echo "Downloading APK from: $BUILD_URL"
          curl -L "$BUILD_URL" -o "${{ steps.version.outputs.app_name }}.apk"

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.version.outputs.app_name }}
          path: ${{ steps.version.outputs.app_name }}.apk
          retention-days: 30

      - name: Create Release (for tags)
        if: steps.version.outputs.is_release == 'true'
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.version.outputs.app_name }}.apk
          body_path: CHANGELOG.md
          tag_name: ${{ github.ref_name }}
          name: 'Release ${{ steps.version.outputs.version }}'
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on commit (for manual builds)
        if: steps.version.outputs.is_release == 'false' && github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const changelog = fs.readFileSync('CHANGELOG.md', 'utf8');

            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `üöÄ **APK Build Complete!**\n\nVersion: ${{ steps.version.outputs.version }}\nDownload: [APK Artifact](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n${changelog}`
            });

      - name: Notify build completion
        if: always()
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "‚úÖ Build completed successfully!"
            echo "üì± APK: ${{ steps.version.outputs.app_name }}.apk"
            echo "üîñ Version: ${{ steps.version.outputs.version }}"
          else
            echo "‚ùå Build failed!"
          fi
